const { isExistIndex, createIndex } = require('../indices/index')

/**
 * 创建或者更新document
 * @param { OBJECT } esClient elasticsearch实体
 * @param { STRING } indexName 索引名
 * @param { STRING } _type 类型
 * @param { STRING } documentId 文档id 
 * @param { STRING } documentBody 文档json内容
 */
function createOrUpdateDocument(esClient, indexName, _type, documentId, documentBody) {
  isExistIndex(esClient, indexName, _type).then((isExist) => {
    if (!isExist) {
      createIndex(esClient, indexName)
    }
  })

  return esClient.index({
    index: indexName,
    id: documentId,
    type: _type,
    body: documentBody,
  })
}

/**
 * 根据自定义字段查询用户
 * @param { OBJECT } esClient elasticsearch实体
 * @param { STRING } indexName 索引名
 * @param { STRING } _type 类型
 * @param { STRING } customPropertyString 自定义字段的键或者值
 * @param { INT } limits 取的数据量默认20条
 * @returns Promise resolve: [ { "_index": "...", "_type": "...", "_id": "...", "_source": { 文档内容 } }, { .... } ]
 * @returns Promise reject: new Error(...)
 */
function searchByCustomProperty(esClient, indexName, _type, customPropertyString, limits = 20) {
  return new Promise(function (resolve, reject) {
    esClient.search({
        index: indexName,
        type: _type,
        body: {
          from: 0,
          size: limits,
          query: {
            match: {
              'custom_property': customPropertyString,
            },
          },
        },
      })
      .then((data) => {
        resolve(data.hits.hits.filter(item => delete item._score))
      })
      .catch((error) => {
        reject(error)
      })
  })
}

/**
 * 根据id查询用户
 * @param { OBJECT } esClient elasticsearch实体
 * @param { STRING } indexName 索引名
 * @param { STRING } _type 类型
 * @param { STRING } documentId 文档id
 * @returns Promise resolve: [ { "_index": "...", "_type": "...", "_id": "...", "_source": { 文档内容 } } ]
 * @returns Promise reject: new Error(...)
 */
function searchById(esClient, indexName, _type, documentId) {
  return new Promise(function (resolve, reject) {
    esClient.search({
        index: indexName,
        type: _type,
        id: documentId,
      })
      .then((data) => {
        resolve(data.hits.hits.filter(item => delete item._score))
      })
      .catch((error) => {
        reject(error)
      })
  })
}

/**
 * 根据id数组查询用户
 * @param { OBJECT } esClient elasticsearch实体
 * @param { STRING } indexName 索引名
 * @param { STRING } _type 类型
 * @param { ARRAY } documentIds 文档id的一位数组
 * @returns Promise resolve: [ { "_index": "...", "_type": "...", "_id": "...", "_source": { 文档内容 } }, { .... }  ]
 * @returns Promise reject: new Error(...)
 */
function searchByIds(esClient, indexName, _type, documentIds) {
  return new Promise(function (resolve, reject) {
    esClient.search({
        index: indexName,
        body: {
          query: {
            ids: {
              type: _type,
              values: documentIds,
            },
          },
        },
      })
      .then((res) => {
        resolve(res.hits.hits.filter(item => delete item._score))
      })
      .catch((error) => {
        reject(error)
      })
  })
}

/**
 * 指定字段和字段值查询用户
 * @param { OBJECT } esClient elasticsearch实体
 * @param { STRING } indexName 索引名
 * @param { STRING } _type 类型
 * @param { STRING } fieldValue 要查询的关键字
 * @param { STRING } fieldsKeys 字段key值的一位数组
 * @param { INT } limits 取的数据量默认20条
 * @returns Promise resolve: [ { "_index": "...", "_type": "...", "_id": "...", "_source": { 文档内容 } }, { .... } ]
 * @returns Promise reject: new Error(...)
 */
function searchByFields(esClient, indexName, _type, fieldValue, fieldsKeys, limits = 20) {
  return new Promise(function (resolve, reject) {
    esClient.search({
        index: indexName,
        type: _type,
        body: {
          from: 0,
          size: limits,
          query: {
            multi_match: {
              query: fieldValue,
              fields: fieldsKeys,
            },
          },
        },
      })
      .then((data) => {
        resolve(data.hits.hits.filter(item => delete item._score))
      })
      .catch((error) => {
        reject(error)
      })
  })
}

module.exports = {
  createOrUpdateDocument,
  searchByCustomProperty,
  searchById,
  searchByIds,
  searchByFields,
}
