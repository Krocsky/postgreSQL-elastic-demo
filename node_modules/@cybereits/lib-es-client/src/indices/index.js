/**
 * 创建
 * @param { OBJECT } esClient elasticsearch实体
 * @param { STRING } indexName 索引名称
 */
function createIndex(esClient, indexName) {
  return esClient.indices.create({
    index: indexName,
  })
}

/**
 * 删除
 * @param { OBJECT } esClient elasticsearch实体
 * @param { STRING } indexName 索引名称
 */
function deleteIndex(esClient, indexName) {
  return esClient.indices.delete({
    index: indexName,
  })
}

/**
 * 判断一个index是否存在
 * @param { OBJECT } esClient 
 * @param { STRING } indexName 
 */
function isExistIndex(esClient, indexName) {
  return esClient.indices.exists({
    index: indexName,
  })
}

/**
 * 判断索引下是否存在这个type
 * @param { OBJECT } esClient 
 * @param { STRING } indexName 
 * @param { STRING } typeName 
 */
function isExistsType(esClient, indexName, typeName) {
  return esClient.indices.existsType({
    index: indexName,
    type: typeName,
  })
}

/**
 * 为指定index && type创建Mapping
 * @param { OBJECT } esClient 
 * @param { STRING } indexName 
 * @param { STRING } typeName 
 * @param { STRING } mappingJson 
 */
function putMapping(esClient, indexName, typeName, mappingJson) {
  isExistIndex(esClient, indexName).then((isExist) => {
    if (isExist) {
      isExistsType(esClient, indexName, typeName).then((typeExist) => {
        if (typeExist) {
          return esClient.indices.putMapping({
            index: indexName,
            type: typeName,
            body: mappingJson,
          })
        }

        throw new Error(`不存在名为 ${ typeName } 的type`)
      })
    }

    return new Error(`不存在名为 ${ indexName } 的index`)
  }).catch((err) => {
    throw new Error(err)
  })
}

module.exports = {
  createIndex,
  deleteIndex,
  isExistIndex,
}
