/**
 * 格式化金额
 * @param {number} num 金额数值
 * @param {boolean} withoutUnit 是否带单位 ¥
 */
function money(num, withoutUnit) {
  var amount = +num
  if (typeof amount === 'number' && !isNaN(amount)) {
    amount = +amount.toFixed(2)
    var ret = amount.toLocaleString()
    var arr = ret.split('.')
    if (arr[1]) {
      arr[1] = `${arr[1]}00`.slice(0, 2)
      ret = arr.join('.')
    } else {
      ret += '.00'
    }
    return `${withoutUnit ? '' : '¥'}${ret}`
  } else {
    return 0
  }
}

/**
 * 将指定数值转换为 2 位左补 0 的格式
 * @param {number} num 数值
 */
function fixZero(num) {
  var len = num.toString().length
  return (`00${num}`).slice(len > 2 ? -len : -2)
}

/**
 * 将秒数转换成 天、小时、分、秒 的形式
 * @param {number} seconds 秒数
 */
function time(seconds) {
  var sec = fixZero(seconds % 60)
  var min = fixZero(Math.floor(seconds / 60) % 60)
  var hour = fixZero(Math.floor(seconds / 60 / 60) % 24)
  var day = fixZero(Math.floor(seconds / 60 / 60 / 24) >>> 0)
  return {
    sec,
    min,
    hour,
    day,
  }
}

/**
 * 指定小数点精度的 floor
 * @param {number|string} number 数值
 * @param {number} decimalLimit 小数点位数限制
 */
function floor(number, decimalLimit = 2) {

  var _number = +number
  var _limit = +decimalLimit

  if (typeof _number !== 'number' || typeof _limit !== 'number') {
    throw new TypeError('the params of function floor must be a number')
  } else if (_number === 0) {
    return 0
  }

  var t = 10 ** _limit
  return Math.floor(_number * t) / t
}

/**
 * 将字符串的某一部分替换成指定的符号
 * @param {string} str 原始字符串
 * @param {number} len 替换的长度
 * @param {string} sign 替换的符号
 * @param {number} startIndex 开始的下标
 */
function hideStr(str, len, sign = '*', startIndex = 0) {
  var chars = str.split('')
  var length = Math.abs(len) + Math.abs(startIndex)
  if (len > 0) {
    return chars.reduce((ret, char, index) => {
      if (index < length && index >= startIndex) {
        ret += sign
      } else {
        ret += char
      }
      return ret
    }, '')
  } else {
    return chars.reduceRight((ret, char, index) => {
      if (index < chars.length - length) {
        ret = `${sign}${ret}`
      } else {
        ret = `${char}${ret}`
      }
      return ret
    }, '')
  }
}

/**
 * 按照指定长度和分隔符去分割字符串
 * @param {string} str 原始的字符串
 * @param {*} blockLength 每块的最大长度
 * @param {*} separator 分隔符
 */
function separate(str, blockLength, separator = ' ') {
  if (blockLength < 1) {
    return str
  }
  var chars = str.split('')
  return chars.reduce((ret, char, index) => {
    ret += char
    if ((index + 1) % blockLength === 0 && index !== str.length - 1) {
      ret += separator
    }
    return ret
  }, '')
}

module.exports = {
  money,
  fixZero,
  time,
  floor,
  hideStr,
  separate,
}
